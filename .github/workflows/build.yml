name: Build

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      os:
        required: true
        type: string
      buildArgs:
        required: true
        type: string
      artifactName:
        required: true
        type: string
      artifactPath:
        required: true
        type: string

permissions: write-all

env:
  HAXE_VERSION: 4.3.7
  PROJECT_NAME: PibbyEngine

jobs:
  build:
    name: Build
    runs-on: ${{ inputs.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Haxe
        uses: krdlab/setup-haxe@master
        with:
          haxe-version: ${{ env.HAXE_VERSION }}

      - name: Restore existing build cache for faster compilation
        if: inputs.name == 'iOS'
        uses: actions/cache@v4
        with:
          # not caching the bin folder to prevent asset duplication and stuff like that
          key: cache-build-ios
          path: |
            .haxelib/
            export/release/ios/PibbyEngine/haxe/
          restore-keys: |
            cache-build-ios

      - name: Restore existing build cache for faster compilation
        if: inputs.name == 'Android'
        uses: actions/cache@v4
        with:
          # not caching the bin folder to prevent asset duplication and stuff like that
          key: cache-build-android
          path: |
            .haxelib/
            export/release/android/haxe/
            export/release/android/obj/
          restore-keys: |
            cache-build-android

      - name: Install libVLC
        if: inputs.name == 'Linux'
        run: sudo apt install libvlc-dev libvlccore-dev

      - name: Install Libraries
        run: |
          haxelib install hmm --quiet
          haxelib run hmm install --quiet
          haxelib install hxcpp-debug-server --quiet

      - name: Clearing already existing cache
        if: inputs.name == 'iOS'
        uses: actions/github-script@v6
        with:
          script: |
            const caches = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            for (const cache of caches.data.actions_caches) {
              if (cache.key == "cache-build-ios") {
                console.log('Clearing ' + cache.key + '...')
                await github.rest.actions.deleteActionsCacheById({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cache_id: cache.id,
                })
                console.log("Cache cleared.")
              }
            }
      - name: Clearing already existing cache
        if: inputs.name == 'Android'
        uses: actions/github-script@v6
        with:
          script: |
            const caches = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            for (const cache of caches.data.actions_caches) {
              if (cache.key == "cache-build-android") {
                console.log('Clearing ' + cache.key + '...')
                await github.rest.actions.deleteActionsCacheById({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cache_id: cache.id,
                })
                console.log("Cache cleared.")
              }
            }

      - name: Uploading new cache
        if: inputs.name == 'Android'
        uses: actions/cache@v4
        with:
          # caching again since for some reason it doesnt work with the first post cache shit
          key: cache-build-android
          path: |
            .haxelib/
            export/release/android/haxe/
            export/release/android/obj/
          restore-keys: |
            cache-build-android

      - name: Configure Android
        if: inputs.name == 'Android'
        run: |
          haxelib run lime config ANDROID_SDK $ANDROID_HOME
          haxelib run lime config ANDROID_NDK_ROOT $ANDROID_NDK_LATEST_HOME
          haxelib run lime config JAVA_HOME $JAVA_HOME_17_arm64
          haxelib run lime config ANDROID_SETUP true

      - name: Compile
        run: haxelib run lime build ${{ inputs.buildArgs }}     

      - name: Make IPA
        if: inputs.name == 'iOS'
        run: |
          brew install ldid
          cd export/release/ios/build/Release-iphoneos/PibbyEngine.app
          ldid -S../../../PibbyEngine/PibbyEngine.entitlements PibbyEngine
          cd ..
          mkdir Payload
          mv PibbyEngine.app Payload
          zip -r PibbyEngine.ipa Payload

      - name: Upload Artifact
        uses: actions/upload-artifact@main
        with:
          name: ${{ inputs.artifactName }}
          path: ${{ inputs.artifactPath }}

      - name: Uploading new cache
        if: inputs.name == 'iOS'
        uses: actions/cache@v4
        with:
          # caching again since for some reason it doesnt work with the first post cache shit
          key: cache-build-ios
          path: |
            .haxelib/
            export/release/ios/PibbyEngine/haxe/
          restore-keys: |
            cache-build-ios
